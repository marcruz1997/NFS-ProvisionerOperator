
Criar e Gerenciar Volumes Persistentes Locais para OpenShift Virtualization com NFS Provisioner Operator (em SNO)
Introdu√ß√£o
No OpenShift Virtualization, as m√°quinas virtuais (VMs) requerem armazenamento persistente para manter dados mesmo ap√≥s reinicializa√ß√µes ou migra√ß√µes. Esse armazenamento √© fornecido por Persistent Volumes (PVs), que persistem al√©m do ciclo de vida de pods ou VMs.
Este artigo demonstra como configurar e gerenciar volumes persistentes locais em um ambiente Single Node OpenShift (SNO) usando o NFS Provisioner Operator, uma solu√ß√£o de provisionamento din√¢mico via NFS, ideal para laborat√≥rios locais, testes e desenvolvimento com OpenShift Virtualization, especialmente quando n√£o h√° um backend de armazenamento externo.

Contexto e Desafios em Ambientes SNO
Tradicionalmente, os PVs eram criados manualmente por administradores, exigindo pr√©-provisionamento e causando inefici√™ncia. A chegada do provisionamento din√¢mico via StorageClass simplificou esse processo, mas ambientes SNO, por padr√£o, n√£o oferecem um provisionador de armazenamento nativo.

NFS Provisioner Operator como Solu√ß√£o
O NFS Provisioner Operator, dispon√≠vel no OperatorHub.io, implanta um servidor NFS no pr√≥prio cluster e configura o provisionador de subdiret√≥rios do projeto kubernetes-sigs/nfs-subdir-external-provisioner.
Vantagens em ambientes SNO:
Permite o provisionamento autom√°tico de volumes NFS para VMs.


F√°cil instala√ß√£o via OperatorHub ou linha de comando.


Solu√ß√£o leve para uso local, sem necessidade de storage externo.


Compat√≠vel com os discos virtuais usados por VMs do OpenShift Virtualization.



Como Funciona
O operador instala um servidor NFS dentro do cluster (em SNO).


Um StorageClass √© criado apontando para o provisionador.


Quando uma VM solicita um PVC usando essa StorageClass, o provisionador cria um diret√≥rio no servidor NFS.


A VM monta esse volume e o utiliza como disco persistente.



Fluxo Geral


Etapa
Descri√ß√£o
Instalar o NFS Provisioner
Via OperatorHub ou YAML
Criar StorageClass
Aponta para o provisionador NFS
Criar PVC para a VM
Usa a StorageClass NFS
Usar PVC na VM
VM monta o volume


Por que usar no SNO?
O Single Node OpenShift √© ideal para testes e desenvolvimento locais, permitindo rodar OpenShift e Virtualization em um √∫nico n√≥ f√≠sico. No entanto, ele n√£o inclui um provisionador de storage din√¢mico por padr√£o, limitando o uso de PVCs com VMs.
Com o NFS Provisioner Operator, voc√™:
‚úÖ Habilita o uso de volumes persistentes em VMs rodando no SNO
 ‚úÖ Elimina a necessidade de solu√ß√µes externas de storage
 ‚úÖ Recria cen√°rios reais de produ√ß√£o em laborat√≥rio

üõ†Ô∏è Instala√ß√£o passo a passo
1. Login e prepara√ß√£o
bash
# Login
oc login -u kubeadmin -p kubeadmin https://https://api.sno.testing:6443 

# Criar um novo namespace
oc new-project nfsprovisioner-operator

# Implantar o operador NFS Provisioner no terminal (Voc√™ tamb√©m pode usar o Console OpenShift)

cat << EOF | oc apply -f -  
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: nfs-provisioner-operator
  namespace: openshift-operators
spec:
  channel: alpha
  installPlanApproval: Automatic
  name: nfs-provisioner-operator
  source: community-operators
  sourceNamespace: openshift-marketplace
EOF



3. Criar diret√≥rio NFS local no n√≥ SNO

# Verificar n√≥s
oc get nodes
NAME                 STATUS   ROLES           AGE   VERSION
crc-8rwmc-master-0   Ready    master,worker   54d   v1.22.3+e790d7f

# Definir vari√°vel de ambiente para o nome do n√≥ alvo
export target_node=$(oc get node --no-headers -o name|cut -d'/' -f2)
oc label node/${target_node} app=nfs-provisioner

# ssh para o n√≥
oc debug node/${target_node}

# Criar um diret√≥rio e configurar o r√≥tulo Selinux.
$ chroot /host
$ mkdir -p /home/core/nfs
$ chcon -Rvt svirt_sandbox_file_t /home/core/nfs
$ exit; exit



4. Criar o servidor NFS via recurso NFSProvisioner
bash
# Criar Recurso Personalizado NFSProvisioner
cat << EOF | oc apply -f -  
apiVersion: cache.jhouse.com/v1alpha1
kind: NFSProvisioner
metadata:
  name: nfsprovisioner-sample
  namespace: nfsprovisioner-operator
spec:
  nodeSelector: 
    app: nfs-provisioner
  hostPathDir: "/home/core/nfs"
EOF

# Verificar se o Servidor NFS est√° rodando
oc get pod
NAME                               READY   STATUS    RESTARTS   AGE
nfs-provisioner-77bc99bd9c-57jf2   1/1     Running   0          2m32s



5. Tornar o NFS StorageClass padr√£o

# Atualizar anota√ß√£o do NFS StorageClass
oc patch storageclass nfs -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

# Verificar o padr√£o pr√≥ximo ao nfs StorageClass
oc get sc
NAME            PROVISIONER       RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
nfs (default)   example.com/nfs   Delete          Immediate           false                  4m29s



‚úÖ Valida√ß√£o

# Criar um PVC de teste
oc apply -f https://raw.githubusercontent.com/Jooho/jhouse_openshift/master/test_cases/operator/test/test-pvc.yaml
persistentvolumeclaim/nfs-pvc-example created

# Verificar o PV/PVC de teste
oc get pv, pvc

NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                                                 STORAGECLASS   REASON   AGE
persistentvolume/pvc-e30ba0c8-4a41-4fa0-bc2c-999190fd0282   1Mi        RWX            Delete           Bound       nfsprovisioner-operator/nfs-pvc-example               nfs                     5s

NAME                                    STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
persistentvolumeclaim/nfs-pvc-example   Bound    pvc-e30ba0c8-4a41-4fa0-bc2c-999190fd0282   1Mi        RWX            nfs            5s

Se o PVC estiver com STATUS = Bound, o provisionamento foi bem-sucedido.

Compatibilizar StorageProfile com o Virtualization
Para suportar volumeMode: Block e diferentes accessModes com OpenShift Virtualization:

oc get storageprofile


oc get storageprofile

NAME   AGE
nfs    73m



oc patch storageprofile nfs --type=merge -p '{
  "spec": {
    "claimPropertySets": [
      {
        "accessModes": ["ReadWriteOnce", "ReadWriteMany", "ReadOnlyMany"],
        "volumeMode": "Filesystem"
      },
      {
        "accessModes": ["ReadWriteOnce", "ReadWriteMany", "ReadOnlyMany"],
        "volumeMode": "Block"
      }
    ]
  }
}'




Considera√ß√µes Finais
Com esse setup, seu ambiente SNO com OpenShift Virtualization pode provisionar armazenamento persistente de forma autom√°tica e reutiliz√°vel, utilizando apenas recursos locais do cluster.
Essa solu√ß√£o √© ideal para:
Simular cen√°rios de produ√ß√£o.


Realizar testes com alta fidelidade.


Evitar depend√™ncia de storage externo ou nuvens p√∫blicas.

